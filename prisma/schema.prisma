// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Member {
  id                             Int                       @id @default(autoincrement())
  createdAt                      DateTime                  @default(now())
  creatorId                      Int?
  creationReason                 String                    @default("")
  createdBy                      Member?                   @relation("Member_creator", fields: [creatorId], references: [id])
  ssoUser                        SSOUser?
  name                           String
  memo                           String                    @default("")
  department                     String
  studentId                      Int
  phoneNumber                    String
  birthday                       DateTime?
  isExecutive                    Boolean                   @default(false)
  isPresident                    Boolean                   @default(false)
  executiveTypeName              String?
  memberType                     MemberType
  schoolRegisterationStatus      SchoolRegisterationStatus
  executiveType                  ExecutiveType?            @relation(fields: [executiveTypeName], references: [name])
  histories                      MemberRecordHistory[]     @relation("MemberRecordHistory_member")
  createdMembers                 Member[]                  @relation("Member_creator")
  createdMemberRecordHistories   MemberRecordHistory[]     @relation("MemberRecordHistory_creator")
  acceptedApplicationAcceptances ApplicationAcceptance[]
  subscriptions                  Subscription[]
  actedDisciplinaryActions       DisciplinaryAction[]      @relation("discliplinaryAction_actor")
  subjectedDisciplinaryActions   DisciplinaryAction[]      @relation("disclipinaryAction_subject")
  createdDisciplinaryActions     DisciplinaryAction[]      @relation("disciplinaryAction_creator")
  pariticipatedActivities        ActivityParticiptation[]  @relation("activityParticiptation_actor")
  createdActivityParticipations  ActivityParticiptation[]  @relation("activityParticiptation_creator")
}

model MemberRecordHistory {
  memberId                  Int
  createdAt                 DateTime                  @default(now())
  creatorId                 Int
  creationReason            String                    @default("")
  createdBy                 Member                    @relation("MemberRecordHistory_creator", fields: [creatorId], references: [id])
  name                      String
  memo                      String                    @default("")
  department                String
  studentId                 Int
  phoneNumber               String
  birthday                  DateTime?
  isExecutive               Boolean                   @default(false)
  isPresident               Boolean                   @default(false)
  executiveTypeName         String?
  memberType                MemberType
  schoolRegisterationStatus SchoolRegisterationStatus
  executiveType             ExecutiveType?            @relation(fields: [executiveTypeName], references: [name])
  member                    Member                    @relation("MemberRecordHistory_member", fields: [memberId], references: [id])

  @@id([memberId, createdAt])
}

model SSOUser {
  id                       String                    @id
  memberId                 Int                       @unique
  emailAddress             String                    @unique
  password                 String
  hashAlgorithm            HashAlgorithm
  member                   Member                    @relation(fields: [memberId], references: [id])
  // OIDC Profile
  introduction             String?
  website                  String?
  nickname                 String?                   @default("만두")
  customAvatarTag          String?
  GraphQlSessions          GraphQlSession[]
  oauth2AuthorizationCodes oauth2AuthorizationCode[]
}

model GraphQlSession {
  id                       String                    @id @default(cuid())
  ssoUserId                String
  expiresAt                DateTime
  createdAt                DateTime                  @default(now())
  ssoUser                  SSOUser                   @relation(fields: [ssoUserId], references: [id])
  OidcSessions             OidcSession[]
  oauth2AuthorizationCodes oauth2AuthorizationCode[]
}

model OidcSession {
  id               String         @id @default(cuid())
  graphQlSessionId String
  clientId         String
  graphQlSession   GraphQlSession @relation(fields: [graphQlSessionId], references: [id])
  client           oauth2Client   @relation(fields: [clientId], references: [id])
}

model ExecutiveType {
  name                 String                @id
  permissions          Permission[]
  Members              Member[]
  MemberRecordHistorys MemberRecordHistory[]
}

model Permission {
  executiveTypeName String
  permission        String
  executiveType     ExecutiveType @relation(fields: [executiveTypeName], references: [name])

  @@id([executiveTypeName, permission])
}

model Code {
  code      String    @id @default(cuid())
  id        String
  expiresAt DateTime
  usage     CodeUsage
  data      Json
}

model ApplicationForm {
  applicationId     String                            @id @default(uuid())
  reApplication     Boolean
  name              String
  department        String
  studentId         Int
  phoneNumber       String
  birthday          DateTime
  applicationDate   DateTime                          @default(now())
  acceptance        ApplicationAcceptance?
  additionalAnswers ApplicationFormAdditionalAnswer[]
}

model ApplicationFormAdditionalQuestion {
  id       String                            @id @default(uuid())
  question String
  deleted  Boolean                           @default(false)
  required Boolean                           @default(false)
  answers  ApplicationFormAdditionalAnswer[]
}

model ApplicationFormAdditionalAnswer {
  questionId    String
  applicationId String
  answer        String
  question      ApplicationFormAdditionalQuestion @relation(fields: [questionId], references: [id])
  form          ApplicationForm                   @relation(fields: [applicationId], references: [applicationId])

  @@id([questionId, applicationId])
}

model ApplicationAcceptance {
  applicationId   String          @id
  accepterId      Int
  accepted        Boolean
  reason          String
  acceptedAt      DateTime        @default(now())
  applicationForm ApplicationForm @relation(fields: [applicationId], references: [applicationId])
  acceptedBy      Member          @relation(fields: [accepterId], references: [id])
}

model Subscription {
  subscriptorId Int
  subscriptor   Member             @relation(fields: [subscriptorId], references: [id])
  target        SubscriptionTarget
  method        SubscriptionMethod

  @@id([subscriptorId, target, method])
}

model oauth2Client {
  id                        String                    @id @default(cuid())
  secret                    String
  name                      String
  redirectUris              String
  allowedScopes             String
  defaultAddedScopes        String
  returnPermissionsAsObject Boolean                   @default(false)
  postLogoutRedirectUris    String
  backchannelLogoutUri      String?
  oidcSessions              OidcSession[]
  oauth2AuthorizationCodes  oauth2AuthorizationCode[]
}

model oauth2Interaction {
  id     String @id @default(cuid())
  params Json
}

model oauth2AuthorizationCode {
  code             String         @id @default(cuid())
  clientId         String
  graphQlSessionId String
  nonce            String?
  userId           String?
  allowedScope     String
  expiredAt        DateTime
  client           oauth2Client   @relation(fields: [clientId], references: [id])
  user             SSOUser?       @relation(fields: [userId], references: [id])
  graphQlSession   GraphQlSession @relation(fields: [graphQlSessionId], references: [id])
}

model ActivityParticiptation {
  id             Int      @id @default(autoincrement())
  actorId        Int
  creatorId      Int
  actor          Member   @relation(fields: [actorId], references: [id], name: "activityParticiptation_actor")
  creator        Member   @relation(fields: [creatorId], references: [id], name: "activityParticiptation_creator")
  activity       String
  createdAt      DateTime @default(now())
  participatedAt DateTime @default(now())
}

model DisciplinaryAction {
  id        Int                    @id @default(autoincrement())
  actorId   Int
  subjectId Int
  creatorId Int
  actor     Member                 @relation(fields: [actorId], references: [id], name: "discliplinaryAction_actor")
  subject   Member                 @relation(fields: [subjectId], references: [id], name: "disclipinaryAction_subject")
  creator   Member                 @relation(fields: [creatorId], references: [id], name: "disciplinaryAction_creator")
  type      DisciplinaryActionType
  reason    String
  actedAt   DateTime               @default(now())
  createdAt DateTime               @default(now())
}

enum SubscriptionMethod {
  Email
}

enum SubscriptionTarget {
  NewApplicationForm
}

enum HashAlgorithm {
  sha256
  bcrypt
}

enum MemberType {
  AssociateMember
  RegularMember
  HonoraryMember
  Removed
  Explusion
}

enum SchoolRegisterationStatus {
  Enrolled
  LeaveOfAbsence
  MilitaryLeaveOfAbsence
  Graduated
  Expelled
}

enum CodeUsage {
  ResendEmailVerification
  EmailVerification
  MembershipVerification
  PasswordRecovery
}

enum DisciplinaryActionType {
  Caution
  Warning
  Probation
  Impeachment
  Explusion
  Nullify
  Other
}
